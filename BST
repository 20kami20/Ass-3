import java.util.*;

public class BST<K extends Comparable<K>, V> implements Iterable<BST.Node<K, V>> {
    private Node root;
    private int size = 0;

    public class Node {
        private K key;
        private V val;
        private Node left, right;

        public Node(K key, V val) {
            this.key = key;
            this.val = val;
        }

        public K getKey() {
            return key;
        }

        public V getValue() {
            return val;
        }
    }

    public void put(K key, V val) {
        root = put(root, key, val);
    }

    private Node put(Node node, K key, V val) {
        if (node == null) {
            size++;
            return new Node(key, val);
        }
        int cmp = key.compareTo(node.key);
        if (cmp < 0) node.left = put(node.left, key, val);
        else if (cmp > 0) node.right = put(node.right, key, val);
        else node.val = val;
        return node;
    }

    public V get(K key) {
        Node node = root;
        while (node != null) {
            int cmp = key.compareTo(node.key);
            if (cmp < 0) node = node.left;
            else if (cmp > 0) node = node.right;
            else return node.val;
        }
        return null;
    }

    public void delete(K key) {
        root = delete(root, key);
    }

    private Node delete(Node node, K key) {
        if (node == null) return null;
        int cmp = key.compareTo(node.key);
        if (cmp < 0) node.left = delete(node.left, key);
        else if (cmp > 0) node.right = delete(node.right, key);
        else {
            size--;
            if (node.right == null) return node.left;
            if (node.left == null) return node.right;

            Node min = node.right;
            while (min.left != null) min = min.left;

            node.key = min.key;
            node.val = min.val;
            node.right = delete(node.right, min.key);
        }
        return node;
    }

    public int size() {
        return size;
    }

    @Override
    public Iterator<Node> iterator() {
        return new Iterator<Node>() {
            private Stack<Node> stack = new Stack<>();
            private Node current = root;

            {
                pushLeft(current);
            }

            private void pushLeft(Node node) {
                while (node != null) {
                    stack.push(node);
                    node = node.left;
                }
            }

            @Override
            public boolean hasNext() {
                return !stack.isEmpty();
            }

            @Override
            public Node next() {
                Node node = stack.pop();
                pushLeft(node.right);
                return node;
            }
        };
    }
}
